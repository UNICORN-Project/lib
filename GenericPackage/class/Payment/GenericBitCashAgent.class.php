<?php

/**
 * BitCashを利用して決済を行う
 * 
 * @author saimushi
 * @see <a href="http://bitcash.co.jp/docs/introduction/index&ref=header">BitCash</a>
 */
class GenericBitCashAgent extends GenericPaymentBase implements GenericPaymentIO
{
	const RATING_ST = '19';
	const RATING_EX = '99';

	/**
	 * @var number 最低課金額 1円以下の決済は出来ない
	 */
	private static $_minimumChargeAmount = 1;

	/**
	 * @var number 最高課金額 1000万以上の決済は出来ない
	 */
	private static $_maximumChargeAmount = 10000000;

	/**
	 * 決済処理
	 * BitCashの場合、$argTokenにはレーティング(ST=19,EX=99)を指定して下さい
	 * BitCashの場合は、一度サイトから離脱を行います。その為「$argReturnURL」と「$argCancelURL」・「$argNotifyURL」は必須で指定して下さい
	 */
	public static function fixPurchase($argAccessKey, $argAccessSecret, $argToken, $argUserID, $argAmount, $argCallbackFunction, $argOptions=NULL, $argItemID=NULL, $argCapture=TRUE, $arg3DSecured=FALSE, $argTax=NULL, $argReturnURL=NULL, $argCancelURL=NULL, $argNotifyURL=NULL, $argExpireDays=NULL, $argDescription=NULL, $argUuid=NULL, $argShop=NULL){
		// バリデート
		if (NULL === $argAmount || (int)$argAmount < self::$_minimumChargeAmount || self::$_maximumChargeAmount < (int)$argAmount || (int)$argAmount < 0) {
			// 金額エラー
			return FALSE;
		}

		$argAccessSecret = explode('.', $argAccessSecret);
		$accessSecret = $argAccessSecret[0];
		$notifyKey = $argAccessSecret[1];

		$protocol = 'https://';
		if (true === (empty($_SERVER['HTTPS']))){
			$protocol = 'http://';
		}

		// オーダーIDを生成してセット
		$orderID = 'bit'.substr(sha1($argToken.':'.$argUserID), 0, 8).'-'.Utilities::date('YmdHis', NULL, NULL, 'GMT');

		$uploadDir = NULL;
		if (NULL === $argNotifyURL){
			// 通知URLを自動生成する
			// callbackFunctionをファイルに書き出す準備
			$results = array();
			$results['userID'] = $argUserID;
			$results['orderID'] = $orderID;
			$results['amount'] = $argAmount;
			$results['options'] = $argOptions;
			$results['accessPass'] = $notifyKey;
			$serializeResults = serialize($results);
			$callbackCode = <<<__CALLBACK__
<?php

if (!isset(\$_POST['tran_id'])){
	throw new Exception('カート画面から再度操作し直して下さい。');
}
if (!isset(\$_POST['order_id'])){
	throw new Exception('カート画面から再度操作し直して下さい。');
}
if (!isset(\$_POST['settle_date'])){
	throw new Exception('カート画面から再度操作し直して下さい。');
}
if (!isset(\$_POST['price'])){
	throw new Exception('カート画面から再度操作し直して下さい。');
}
if (!isset(\$_POST['hash'])){
	throw new Exception('カート画面から再度操作し直して下さい。');
}
\$tranId = \$_POST['tran_id'];
\$orderId = \$_POST['order_id'];
\$settleDate = \$_POST['settle_date'];
\$price = \$_POST['price'];
\$hash = \$_POST['hash'];

function __bitcashCallback(\$results){
$argCallbackFunction
}

\$results = unserialize('$serializeResults');

\$hashSource = '';
\$hashSource .= 'tran_id=';
\$hashSource .= urlencode(mb_convert_encoding(\$tranId, 'UTF-8', 'auto'));
\$hashSource .= '&order_id=';
\$hashSource .= urlencode(mb_convert_encoding(\$orderId, 'UTF-8', 'auto'));
\$hashSource .= '&settle_date=';
\$hashSource .= urlencode(mb_convert_encoding(\$settleDate, 'UTF-8', 'auto'));
\$hashSource .= '&price=';
\$hashSource .= urlencode(mb_convert_encoding(\$price, 'UTF-8', 'auto'));
\$hashSource .= \$results['accessPass'];

if( \$hash != sha1(\$hashSource) ) {
	// ハッシュ値が生成時と異なる場合
	// XXX ロギング
	throw new Exception('不正なアクセスです');
}

\$results['accessID'] = str_pad(\$results['accessPass'], 32, 0, STR_PAD_LEFT);
\$results['accessPass'] = str_pad(\$tranId, 32, 0, STR_PAD_LEFT);
// ココに到達してる時点で決済APIは成功している
\$results['status'] = TRUE;

\$_results = __bitcashCallback(\$results);

if (true !== (is_array(\$_results) && isset(\$_results['accessPass']) && 0 < strlen(\$_results['accessPass']))){
	throw new Exception('カート画面から再度操作し直して下さい。');
}

// 正常終了
header('HTTP/1.1 200 OK');

?>
__CALLBACK__;
			if (class_exists('WebStorage') && function_exists('getAutoGeneratedPath') && TRUE === (NULL !== getConfig('S3BUCKET') || NULL !== getConfig('FILE_UPLOAD_DIR'))){
				$uploadDir = getConfig('S3BUCKET');
				if (NULL === $uploadDir){
					$uploadDir = getConfig('FILE_UPLOAD_DIR');
				}
				if (0 === strpos($uploadDir, '/')){
					// 絶対パスはバケット指定の場合に使えないので却下
					$uploadDir = NULL;
				}
			}
		}
		if (NULL !== $uploadDir){
			$dir = 'bitcashcallbacks/';
			// フレームワークのWebStorageが利用出来る場合は、WebStorageに生成スクリプトを置く(分散環境でも動く)
			$path = getAutoGeneratedPath();
			if (!is_dir($path.$dir)){
				@mkdir($path.$dir, 0777, true);
				@exec('chmod -R 0777 ' .$path.$dir);
			}
			if (!is_dir($path.$dir)){
				// ディレクトリ生成エラー
				throw new Exception(__CLASS__.PATH_SEPARATOR.__METHOD__.PATH_SEPARATOR.__LINE__);
			}
			$genFilePath = $path.$dir.sha256($argUserID).'.php';
			@file_put_contents($genFilePath, str_replace(PHP_EOL."\t\t\t\t", PHP_EOL."\t", $callbackCode));
			@chmod($genFilePath, 0777);
			// WebStorageにソースをアップする
			$StorageEngine = new WebStorage();
			$fileName = $uploadDir.$dir.sha256($argUserID).'.php';
			$res = $StorageEngine->save($fileName, $genFilePath);
			$fwCorePath = getFrameworkCoreFilePath(TRUE);
			$projectName = '';
			if (defined('PROJECT_NAME') && 0 < strlen(PROJECT_NAME)){
				$projectName = PROJECT_NAME;
			}
			$bootCodePath = str_replace('//', '/', $_SERVER['DOCUMENT_ROOT'].dirname($_SERVER['REQUEST_URI']).'/bitcashcallback.php');
			@file_put_contents($bootCodePath, self::_getCallbackBootCode($projectName, $fwCorePath, $dir));
			@chmod($bootCodePath, 0777);
			$notifyURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).'/bitcashcallback.php?token='.sha256($argUserID));
		}
		else if (NULL === $argNotifyURL){
			// XXX 分散環境での動作は、自身で設計構築が必要です。
			$dir = 'bitcashcallbacks/'.Utilities::date('Y', NULL, NULL, 'GMT').'/'.Utilities::date('m', NULL, NULL, 'GMT').'/'.Utilities::date('d', NULL, NULL, 'GMT').'/';
			$path = $_SERVER['DOCUMENT_ROOT'].dirname($_SERVER['REQUEST_URI']);
			if (!is_dir($path.$dir)){
				@mkdir($path.$dir, 0777, true);
				@exec('chmod -R 0777 ' .$path);
			}
			if (!is_dir($path.$dir)){
				// ディレクトリ生成エラー
				throw new Exception(__CLASS__.PATH_SEPARATOR.__METHOD__.PATH_SEPARATOR.__LINE__);
			}
			$genFilePath = $path.$dir.sha256($argUserID).'.php';
			@file_put_contents($genFilePath, str_replace(PHP_EOL."\t\t\t\t", PHP_EOL."\t", $callbackCode));
			@chmod($genFilePath, 0777);
			$notifyURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).$dir.'/'.sha256($argUserID).'.php');
		}
		else {
			$notifyURL = $argNotifyURL;
		}

		$returnURL = $argReturnURL;
		$cancelURL = $argCancelURL;
		if (NULL === $returnURL){
			$returnURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).'/bitcashcallback-success.php');
		}
		else if (FALSE === strpos($returnURL, '//'.$_SERVER['HTTP_HOST'])){
			$returnURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).'/'.$returnURL);
		}
		if (NULL === $cancelURL){
			$cancelURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).'/bitcashcallback-cancel.php');
		}
		else if (FALSE === strpos($cancelURL, '//'.$_SERVER['HTTP_HOST'])){
			$cancelURL = $protocol.$_SERVER['HTTP_HOST'] . str_replace('//', '/', dirname($_SERVER['REQUEST_URI']).'/'.$cancelURL);
		}

		// ローカルからはBitcashに繋がらないので、処理フローをエミュレート
		if (function_exists('getLocalEnabled') && 1 === (int)getLocalEnabled()){
			// ローカル環境の場合は強制OKにしてしまう
			$tranID = '9999999999999999999999999';
			$settleDate = Utilities::date('Y/m/d H:i:s', NULL, NULL, 'GMT');
			$hashSource = '';
			$hashSource .= 'tran_id=';
			$hashSource .= urlencode(mb_convert_encoding($tranID, 'UTF-8', 'auto'));
			$hashSource .= '&order_id=';
			$hashSource .= urlencode(mb_convert_encoding($orderID, 'UTF-8', 'auto'));
			$hashSource .= '&settle_date=';
			$hashSource .= urlencode(mb_convert_encoding($settleDate, 'UTF-8', 'auto'));
			$hashSource .= '&price=';
			$hashSource .= urlencode(mb_convert_encoding($argAmount, 'UTF-8', 'auto'));
			$hashSource .= $notifyKey;
			$hash = sha1($hashSource);
			if (false === httpRequest($notifyURL, array('method' => 'post', 'post' => array('tran_id' => $tranID, 'order_id' => $orderID, 'settle_date' => $settleDate, 'price' => $argAmount, 'hash' => $hash)))){
				// 失敗
				header('Location: '.$cancelURL);
				exit;
			}
			// 成功
			header('Location: '.$returnURL);
			exit;
		}

		$logBasePath = '';
		if (function_exists('getConfig')){
			$logBasePath = getConfig('LOG_PATH');
		}
		if (0 >= strlen($logBasePath)){
			$logBasePath = '/logs/settle/';
		}

		bitcash_setTLE($orderID, $argToken, $argAmount, $argAccessKey, $accessSecret, $notifyURL, $returnURL, $cancelURL, 300, $logBasePath);

		// 正常終了
		return TRUE;
	}

	public static function cancelPurchase($argAccessKey, $argAccessSecret, $argAccessID, $argAccessPass, $argRETURN=TRUE){
	}
}

?>