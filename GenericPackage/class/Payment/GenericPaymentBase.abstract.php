<?php

abstract class GenericPaymentBase
{
	/**
	 * Interfaceの仮実装
	 */
	public static function fixPurchase($argAccessKey, $argAccessSecret, $argToken, $argUserID, $argAmount, $argCallbackFunction, $argOptions=NULL, $argItemID=NULL, $argCapture=TRUE, $arg3DSecured=FALSE, $argTax=NULL, $argReturnURL=NULL, $argCancelURL=NULL, $argNotifyURL=NULL, $argExpireDays=NULL, $argDescription=NULL, $argUuid=NULL, $argShop=NULL){
		return FALSE;
	}

	/**
	 * Interfaceの仮実装
	 */
	public static function cancelPurchase($argAccessKey, $argAccessSecret, $argAccessID, $argAccessPass, $argRETURN=TRUE){
		return FALSE;
	}

	protected static function _getCallbackBootCode($projectName, $fwCorePath, $dir){
		return <<<__BOOTCODE__
<?php

mb_http_output("UTF-8");
mb_internal_encoding("UTF-8");
define('PROJECT_NAME', '$projectName');
require_once realpath(\$_SERVER['DOCUMENT_ROOT'].'/$fwCorePath');

if (!(is_array(\$_GET) && isset(\$_GET['token']))){
	throw new Exception('カート画面から再度操作し直して下さい。');
}

\$uploadDir = NULL;
\$dir = '$dir';
if (class_exists('WebStorage') && function_exists('getAutoGeneratedPath') && TRUE === (NULL !== getConfig('S3BUCKET') || NULL !== getConfig('FILE_UPLOAD_DIR'))){
	\$uploadDir = getConfig('S3BUCKET');
	if (NULL === \$uploadDir){
		\$uploadDir = getConfig('FILE_UPLOAD_DIR');
	}
	if (0 === strpos(\$uploadDir, '/')){
		// 絶対パスはバケット指定の場合に使えないので却下
		\$uploadDir = NULL;
	}
}

if (NULL === \$uploadDir){
	throw new Exception('カート画面から再度操作し直して下さい。');
}

// WebStorageから実行ソースを取得する
\$StorageEngine = new WebStorage();
\$fileName = \$uploadDir.\$dir.\$_GET['token'].'.php';
\$callbackPHP = \$StorageEngine->loadBinary(\$fileName);
\$path = getAutoGeneratedPath();
if (!is_dir(\$path.\$dir)){
	@mkdir(\$path.\$dir, 0777, true);
	@exec('chmod -R 0777 ' .\$path.\$dir);
}
if (!is_dir(\$path.\$dir)){
	// ディレクトリ生成エラー
	throw new Exception('カート画面から再度操作し直して下さい。');
}
\$genFilePath = \$path.\$dir.\$_GET['token'].'.php';
@file_put_contents(\$genFilePath, \$callbackPHP);

// 生成スクリプトを起動する
require_once \$genFilePath;

?>
__BOOTCODE__;
		}
}

?>
