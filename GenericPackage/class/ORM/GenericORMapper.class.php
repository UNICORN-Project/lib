<?php

/**
 * モデルクラスの親クラス
 */
class GenericORMapper {

	private static $_models;
	public static $modelHashs = array();
	public static $Locks = array();

	/**
	 * コンストラクタ
	*/
	private function __construct(){
	}

	/**
	 * エイリアス
	 */
	public static function getModel($argDBO, $argModelName, $argExtractionCondition=NULL, $argBinds=NULL, $argAutoReadable=TRUE, $argSeqQuery=NULL){
		return self::getAutoGenerateModel($argDBO, $argModelName, $argExtractionCondition, $argBinds, $argAutoReadable, $argSeqQuery);
	}

	/**
	 * モデルクラスを自動生成して返す
	 */
	public static function getAutoGenerateModel($argDBO, $argModelName, $argExtractionCondition=NULL, $argBinds=NULL, $argAutoReadable=TRUE, $argSeqQuery=NULL){
		// モデルクラス名とテーブル名を特定する
		$tableName = $argModelName;
		$modelName = self::getGeneratedModelName($tableName);

		// テーブル名末尾の数値は、ナンバリングテーブル名だと仮定して、外す
		$matches = NULL;
		$unNumberingModelName = NULL;
		preg_match('/^([^0-9]+)[0-9]+$/', $modelName, $matches);
		if(is_array($matches) && isset($matches[1]) && strlen($matches[1]) > 0){
			$unNumberingModelName = $matches[1];
		}

		// モデルクラス名と、テーブル名の最終調整
		if((strlen($modelName) -5) === strpos(strtolower($modelName), "model")){
			$tableName = substr($tableName, 0, strlen($tableName)-5);
		}else{
			$modelName = $modelName."Model";
		}
		//$tableName = ucfirst($tableName);

		// オートマイグレートその1
		$lastMigrationHash = NULL;
		if(function_exists('getAutoMigrationEnabled') && TRUE === getAutoMigrationEnabled()){
			// 未適用のmigrationがあれば、実行する
			$lastMigrationHash = MigrationManager::dispatchAll($argDBO, $tableName);
			if(TRUE === $lastMigrationHash){
				$lastMigrationHash = NULL;
			}
		}

		// モデルがまだ未生成ならモデルをテーブル定義から生成する
		if(!isset(self::$_models[$tableName])){
			// 親クラスを決める
			$superModelName = "ModelBase";
			if(class_exists($modelName."Extension")){
				$superModelName = $modelName."Extension";
			}
			elseif(NULL !== $unNumberingModelName && class_exists($unNumberingModelName."Extension")){
				$superModelName = $unNumberingModelName."Extension";
			}
			// 上で見つからなければdefault.modelmainも探してみる
			if("ModelBase" === $superModelName){
				loadModule("default.modelmain.".$modelName."Extension", TRUE);
				if(class_exists($modelName."Extension")){
					$superModelName = $modelName."Extension";
				}
				elseif(NULL !== $unNumberingModelName){
					loadModule("default.modelmain.".$unNumberingModelName."Extension", TRUE);
					if(class_exists($unNumberingModelName."Extension")){
						$superModelName = $unNumberingModelName."Extension";
					}
				}
			}
			// 生成したクラスを取っておく
			self::$_models[$tableName] = $modelName;

			// オートマイグレーションが無効な場合、既に生成済みのクラスがあれば其れを使う
			$generatedModelFilePath = getAutoGeneratedPath().$argDBO->dbidentifykey.'.'.$modelName.'Extends'.$superModelName.'.generated.inc.php';
			if(!(function_exists('getAutoMigrationEnabled') && TRUE === getAutoMigrationEnabled()) && is_file($generatedModelFilePath)){
				require_once($generatedModelFilePath);
			}
			else {
				// テーブル定義を取得
				$tableDefs = self::getModelPropertyDefs($argDBO, $tableName);
				$varDef = $tableDefs['varDef'];
				$describeDef = $tableDefs['describeDef'];
				$indexDef = $tableDefs['indexDef'];

				// モデルクラスの自動生成
				$varDef .= "public \$sequenceSelectQuery = \"" . $argSeqQuery . "\";".PHP_EOL;
				// InterfaceはフレームワークのmodelクラスでI/Oの実装を強制する
				$baseModelClassDefine = "class " . $modelName . " extends " . $superModelName . " implements Model {".PHP_EOL.PHP_TAB."%vars%".PHP_EOL.PHP_TAB."public function __construct(\$argDBO, \$argExtractionCondition=NULL, \$argBinds=NULL){".PHP_EOL.PHP_TAB.PHP_TAB."%describes%".PHP_EOL.PHP_TAB.PHP_TAB."%indexes%".PHP_EOL.PHP_TAB.PHP_TAB."parent::__construct(\$argDBO, \$argExtractionCondition, \$argBinds);".PHP_EOL.PHP_TAB."}".PHP_EOL."}";
				$baseModelClassDefine = str_replace("%vars%", str_replace("; public ", ";".PHP_EOL.PHP_TAB."public ", $varDef), $baseModelClassDefine);
				$baseModelClassDefine = str_replace("%describes%", str_replace("; \$this->", ";".PHP_EOL.PHP_TAB.PHP_TAB."\$this->", $describeDef), $baseModelClassDefine);
				$baseModelClassDefine = str_replace("%indexes%", str_replace("; \$this->", ";".PHP_EOL.PHP_TAB.PHP_TAB."\$this->", $indexDef), $baseModelClassDefine);
				
				// モデルクラス定義からクラス生成
				eval($baseModelClassDefine);

				// XXX Viewはテーブルマイグレーションはしない！
				// XXX Viewのマイグレーションはそのうちやるけど、セレクトの条件定義をどうとるか・・・
				if (FALSE === strpos($varDef, "\$tableEngine = \"View\"")){
					// オートマイグレーションが有効だった場合
					if(function_exists('getAutoMigrationEnabled') && TRUE === getAutoMigrationEnabled()){
						// 定義の更新が無いか確認し、あれば新しいマイグレーションファイルを生成
						MigrationManager::resolve($argDBO, $tableName, $lastMigrationHash);
					}
				}
				// オートジェネレートが有効だった場合
				if(function_exists('getAutoGenerateEnabled') && TRUE === getAutoGenerateEnabled()){
					@file_put_contents($generatedModelFilePath, '<?php'.PHP_EOL.PHP_EOL.$baseModelClassDefine.PHP_EOL.PHP_EOL.'?>');
					@chmod($argGeneratedPath, 0666);
				}
				// ローカル環境の時はクライアントモデルをオートでジェネレートしてあげる
				if(function_exists('getConfig') && function_exists('getLocalEnabled') && false === is_file(getConfig('PROJECT_ROOT_PATH').'.manager') && 1 === getLocalEnabled()){
					if (class_exists('AppMigrationManager')){
						AppMigrationManager::generateModel($argDBO, $tableName);
					}
				}
			}
		}
		$model = new self::$_models[$tableName]($argDBO, $argExtractionCondition, $argBinds, $argAutoReadable);
		$model->className = $modelName;

		// テーブル定義のハッシュ値を取っておく
		$indexSerialStr = '';
		if (0 < count($model->indexes)){
			$indexSerialStr = serialize($model->indexes);
		}
		logging("migration-index:".$indexSerialStr, "migration");
		self::$modelHashs[$tableName] = sha1($model->tableComment . $model->tableEngine . serialize($model->describes) . $indexSerialStr);

		return $model;
	}

	/**
	 * モデル定義取得
	 */
	public static function getModelPropertyDefs($argDBO, $tableName, $argDescribes=NULL){
		// Viewか否か
		$isView = FALSE;
		
		// DBエンジン、テーブルコメントの抽出
		$tableStatuses = array();
		$tableIndexs = array();
		
		// XXX 現在はMySQL専用
		if ("mysql" === $argDBO->DBType){
			logging("migration SHOW TABLE STATUS LIKE '".strtolower($tableName)."'", "migration");
			$response = $argDBO->execute("SHOW TABLE STATUS LIKE '".strtolower($tableName)."'");
			//logging("migration res1=".$response, "migration");
			if(FALSE !== $response){
				$tableStatuses = $response->GetAll();
				logging("migration:res2=".var_export($tableStatuses,true), "migration");
			}
			logging("migration res3=".$response, "migration");
			// インデックスの取得
			logging("migration SHOW INDEX FROM `".strtolower($tableName)."`", "migration");
			$response = $argDBO->execute("SHOW INDEX FROM `".strtolower($tableName)."`");
			if(FALSE !== $response){
				$tableIndexs = $response->GetAll();
				logging("migration:res5=".var_export($tableIndexs,true), "migration");
			}
			logging("migration:res6=".$response, "migration");
		}
		// CommentがView(Viewのときは自動で入る)の場合、
		// Engine="InnoDB"を自動で入れる
		if(	0 < count($tableStatuses)
			&& isset($tableStatuses[0]) && isset($tableStatuses[0]["Comment"])
			&& strtolower($tableStatuses[0]["Comment"]) == "view"){
			logging("is View:".$tableName);
			$tableStatuses[0]["Engine"] = "View";
			$isView = TRUE;
		}
		
		$describes = $argDescribes;
		if(NULL === $describes){
			// テーブル定義を取得
			$describes = $argDBO->getTableDescribes($tableName);
		}
		$describeDef = "\$this->describes = array(); ";
		$varDef = NULL;
		$indexDef = NULL;
		$pkeysVarDef = "public \$pkeys = array(";
		$pkeyCnt = 0;
		if(is_array($describes) && count($describes) > 0){
			$desc_no = 0;
			foreach($describes as $colName => $describe){
				// 小文字で揃える(Oracle向けの対応)
				$colName = strtolower($colName);
				$escape = "";
				if("int" !== $describe["type"] && "bool" !== $describe["type"]){
					$escape = "\"";
				}
				if(isset($describe["type"]) && "bool" === $describe["type"] && isset($describe["default"])){
					if(TRUE === $describe["default"]){
						$describe["default"] = "TRUE";
					}
					elseif(FALSE === $describe["default"]){
						$describe["default"] = "FALSE";
					}
				}
				if(isset($describe["default"]) && NULL === $describe["default"]){
					$describe["default"] = "NULL";
				}
				if(TRUE === $describe["null"]){
					$describe["null"] = "TRUE";
				}
				elseif(FALSE === $describe["null"]){
					$describe["null"] = "FALSE";
				}
				if(TRUE === $describe["pkey"]){
					$describe["pkey"] = "TRUE";
				}
				elseif(FALSE === $describe["pkey"]){
					$describe["pkey"] = "FALSE";
				}
				if(TRUE === $describe["autoincrement"]){
					$describe["autoincrement"] = "TRUE";
				}
				elseif(FALSE === $describe["autoincrement"]){
					$describe["autoincrement"] = "FALSE";
				}
				// Viewの場合
				// 1つ目のカラムの場合
				if( TRUE ===  $isView && 0 === $desc_no){
					logging("table:".$tableName." type:".$describe["type"]);
					// typeがintかbigintの場合
					if( $describe["type"] == "bigint" || $describe["type"] == "int" ){
						logging("is View no pkey");
						$describe["pkey"] = "TRUE";
						$describe["autoincrement"] = "TRUE";
					}
				}
				
				$describeDef .= "\$this->describes[\"" . $colName . "\"] = array(); ";
				$describeDef .= "\$this->describes[\"" . $colName . "\"][\"type\"] = \"" . $describe["type"] . "\"; ";
				if(isset($describe["default"]) && FALSE !== $describe["default"]){
					if("NULL" !== $describe["default"]){
						$describeDef .= "\$this->describes[\"" . $colName . "\"][\"default\"] = " . $escape . $describe["default"] . $escape . "; ";
					}
					else{
						$describeDef .= "\$this->describes[\"" . $colName . "\"][\"default\"] = " . $describe["default"] . "; ";
					}
				}
				$describeDef .= "\$this->describes[\"" . $colName . "\"][\"null\"] = " . $describe["null"] . "; ";
				$describeDef .= "\$this->describes[\"" . $colName . "\"][\"pkey\"] = " . $describe["pkey"] . "; ";
				if(isset($describe["length"])){
					$describeDef .= "\$this->describes[\"" . $colName . "\"][\"length\"] = \"" . $describe["length"] . "\"; ";
				}
				if(isset($describe["min-length"])){
					$describeDef .= "\$this->describes[\"" . $colName . "\"][\"min-length\"] = " . $describe["min-length"] . "; ";
				}
				$describeDef .= "\$this->describes[\"" . $colName . "\"][\"autoincrement\"] = " . $describe["autoincrement"] . "; ";
				if(isset($describe["comment"])){
					$describeDef .= "\$this->describes[\"" . $colName . "\"][\"comment\"] = \"" . $describe["comment"] . "\"; ";
				}
				$varDef .= "public \$" . $colName;
				if(isset($describe["default"]) && strlen($describe["default"]) > 0){
					$varDef .= " = " . $escape . $describe["default"] . $escape;
				}
				elseif(isset($describe["null"]) && "TRUE" === $describe["null"]){
					$varDef .= " = NULL";
				}
				$varDef .= "; ";
				if(0 === $pkeyCnt && isset($describe["pkey"]) && "TRUE" === $describe["pkey"]){
					$varDef .= "public \$pkeyName = \"" . $colName . "\"; ";
					$pkeyCnt++;
				}
				if(isset($describe["pkey"]) && "TRUE" === $describe["pkey"]){
					$pkeysVarDef .= "\"" . $colName . "\", ";
				}
				$desc_no++;
			}
			$pkeysVarDef .= "); ";
			$varDef .= $pkeysVarDef;
			$varDef .= "public \$tableName = \"" . $tableName . "\"; ";
			
			logging("migration:".var_export($tableStatuses, true), "migration");
			logging("migration:".var_export($tableIndexs, true), "migration");
			if(0 < count($tableStatuses) && isset($tableStatuses[0]) && isset($tableStatuses[0]["Comment"])){
				$varDef .= "public \$tableComment = \"" . $tableStatuses[0]['Comment'] . "\"; ";
			}
			else {
				$varDef .= "public \$tableComment = ''; ";
			}
			if(0 < count($tableStatuses) && isset($tableStatuses[0]) && isset($tableStatuses[0]["Engine"])){
				$varDef .= "public \$tableEngine = \"" . $tableStatuses[0]['Engine'] . "\"; ";
			}
			else {
				$varDef .= "public \$tableEngine = ''; ";
			}
			if(0 < count($tableIndexs) && isset($tableIndexs[0]) && isset($tableIndexs[0]["Key_name"])){
				// ループ処理
				for ($idx=0, $eidx=0; $idx < count($tableIndexs); $idx++){
					if (0 < $pkeyCnt && 'PRIMARY' == $tableIndexs[$idx]['Key_name']){
						// Pkeyのマイグレーションは既にあるので無視
					}
					else {
						if (0 == $eidx){
							$indexDef = "\$this->indexes = array(); ";
						}
						if (1 === (int)$tableIndexs[$idx]["Non_unique"]){
							if (FALSE === strpos($indexDef, "\$this->indexes[\"" . $tableIndexs[$idx]["Key_name"] . "\"] = array(\"Colums\" => array(), \"Index_comment\" => \"" . $tableIndexs[$idx]["Index_comment"] . "\",); ")) {
								$indexDef .= "\$this->indexes[\"" . $tableIndexs[$idx]["Key_name"] . "\"] = array(\"Colums\" => array(), \"Index_comment\" => \"" . $tableIndexs[$idx]["Index_comment"] . "\",); ";
							}
						}
						else {
							if (FALSE === strpos($indexDef, "\$this->indexes[\"" . $tableIndexs[$idx]["Key_name"] . "\"] = array(\"Colums\" => array(), \"Unique\" => 1, \"Index_comment\" => \"" . $tableIndexs[$idx]["Index_comment"] . "\",); ")) {
								$indexDef .= "\$this->indexes[\"" . $tableIndexs[$idx]["Key_name"] . "\"] = array(\"Colums\" => array(), \"Unique\" => 1, \"Index_comment\" => \"" . $tableIndexs[$idx]["Index_comment"] . "\",); ";
							}
						}
						$indexDef .= "\$this->indexes[\"" . $tableIndexs[$idx]["Key_name"] . "\"][\"Colums\"][] = \"" . $tableIndexs[$idx]["Column_name"] . "\"; ";
						$eidx++;
					}
				}
				logging("migration-index:".$indexDef, "migration");
			}
			else {
				//$varDef .= "public \$tableComment = ''; ";
			}
			return array('varDef' => $varDef, 'describeDef' => $describeDef, 'indexDef' => $indexDef);
		}
		else {
			throw new Exception(__CLASS__.PATH_SEPARATOR.__METHOD__.PATH_SEPARATOR.__LINE__);
		}
	}

	/**
	 * テーブル名をモデル名に変換する
	 * @param unknown $argTableName
	 * @return unknown
	 */
	public static function getGeneratedModelName($argTableName){
		// モデルクラス名とテーブル名を特定する
		$tableName = $argTableName;
		$modelName = ucfirst($tableName);
		$modelName = str_replace("_", " ", $modelName);
		$modelName = ucwords($modelName);
		$modelName = str_replace(" ", "", $modelName);
		return $modelName;
	}

	/**
	 * 悲観ロックテーブルにロックをかける
	 */
	public static function lock($argDBO, $argModelName, $argIdentifier, $argLockIdentifierName='identifier'){
		if (isset(self::$Locks[strtolower($argModelName)]) && isset(self::$Locks[strtolower($argModelName)][sha1($argIdentifier)])){
			logging('exists lock', 'query');
			return;
		}
		logging('start check lock '.$argModelName.'&'.$argIdentifier, 'query');
		logging(array_keys(self::$Locks), 'query');
		if (!isset(self::$Locks[strtolower($argModelName)]) || !is_array(self::$Locks[strtolower($argModelName)])){
			self::$Locks[strtolower($argModelName)] = array();
		}
		// トランザクションの明示的開始
		$argDBO->begin();
		// XXX この時点で、行ロックで別のプロセスは待たされます！！！
		self::$Locks[strtolower($argModelName)][sha1($argIdentifier)] = self::getModel($argDBO, $argModelName, 'SELECT `'.$argLockIdentifierName.'` FROM '.$argModelName.' WHERE `'.$argLockIdentifierName.'` = '.$argIdentifier.' LIMIT 1 FOR UPDATE');
		if (0 < strlen(self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]->{$argLockIdentifierName})){
			// XXX デッドロックの可能性！！！
			logging('dead lock!! '.$argModelName.'&'.$argIdentifier, 'query');
			logging('dead lock!! '.$argModelName.'&'.$argIdentifier, 'deadlock');
			return;
		}
		$method = 'set'.ucfirst($argLockIdentifierName);
		self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]->$method($argIdentifier);
		self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]->save();
		// XXX コミットはしない！！
		logging('start lock '.$argModelName.'&'.$argIdentifier, 'query');
	}

	/**
	 * 悲観ロックテーブルのロックを外す
	 */
	public static function unlock($argModelName, $argIdentifier=NULL, $argLockIdentifierName='identifier'){
		if (NULL !== $argIdentifier){
			// ID指定で強制ロック解除
			if (isset(self::$Locks[strtolower($argModelName)]) && self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]){
				self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]->remove();
				logging('remove lock force '.$argModelName.'&'.$argIdentifier, 'query');
				self::$Locks[strtolower($argModelName)][sha1($argIdentifier)]->getDBO()->commit();
				logging('end lock force '.$argModelName, 'query');
			}
			else {
				// 相当強力な強制ロック解除
				$DBO = DBO::sharedInstance();
				$Lock = self::getModel($DBO, $argModelName, 'SELECT `'.$argLockIdentifierName.'` FROM '.$argModelName.' WHERE `'.$argLockIdentifierName.'` = '.$argIdentifier.' LIMIT 1');
				if (0 < strlen($Lock->id)){
					$Lock->remove();
					logging('remove lock superforce '.$argModelName.'&'.$argIdentifier, 'query');
					$DBO->commit();
					logging('end lock superforce '.$argModelName, 'query');
				}
			}
		}
		else if (isset(self::$Locks[strtolower($argModelName)]) && 0 < count(self::$Locks[strtolower($argModelName)])){
			$lockKeys = array_keys(self::$Locks[strtolower($argModelName)]);
			for ($lockIdx=0; $lockIdx < count($lockKeys); $lockIdx++){
				self::$Locks[strtolower($argModelName)][$lockKeys[$lockIdx]]->remove();
				logging('remove lock '.$argModelName.'&'.$lockKeys[$lockIdx], 'query');
			}
			for ($lockIdx=0; $lockIdx < count($lockKeys); $lockIdx++){
				self::$Locks[strtolower($argModelName)][$lockKeys[$lockIdx]]->getDBO()->commit();
			}
			// XXX トランザクションの明示的解放
			self::$Locks[strtolower($argModelName)] = array();
			logging('end lock '.$argModelName, 'query');
		}
	}
}

?>
